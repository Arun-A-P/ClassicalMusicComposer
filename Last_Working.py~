from pybrain.tools.shortcuts import buildNetwork
from pybrain.structure.modules import LSTMLayer
from pybrain.supervised import RPropMinusTrainer
from pybrain.datasets import SequentialDataSet
from itertools import cycle
from pybrain.datasets import SupervisedDataSet,UnsupervisedDataSet
from sys import stdout
#import gtk
#import gtk.glade
from gi.repository import Gtk
import thread
import time
import threading
import random


#Define a function/Dictionary that converts the classical notation into numbers, such as S=1, R=2 and so on....
#Consideration has not yet been made for -,tones,etc
def f(x):

	if x==1:
		return 'S'
	elif x==2:
		return 'R'
	elif x==3:
		return 'G'
	elif x==4:
		return 'M'
	elif x==5:
		return 'P'
	elif x==6:
		return 'D'
	elif x==7:
		return 'N'
	elif x==8:
		return '-'
		
		
class trainer:
	
	
	def __init__( self ):
		
		global i
		i=0
		global builder2
		filename = "Train.glade"
		builder2 = Gtk.Builder()
		builder2.add_from_file(filename)
		#builder2.connect_signals(self)
		global window1
		window1 = builder2.get_object("train")
		window1.show_all()
		
		handlers = {
			"tr": self.check
			}
		
		builder2.connect_signals(handlers)
		
		#print("final error =", train_errors[-1])
		
	def check(self,*args):
		global i
		
		if i==0:
			i=i+1
			self.trainee()
		else:
			i=0
			self.delete()
	
	def delete(self):
		global window1
		window1.destroy()
		
	def trainee(self):
		
		button=builder2.get_object("start")
		spin=builder2.get_object("spinner1")

		spin.start()
		
		def callback():
		
			ds = SequentialDataSet(1, 1) #Make a sequential data set which is capable of holding a sequence
			data=[1,8,7,6,7,1,2,3,5,8,4,8,3,8,8,2,2,8,8,8,3,4,5,3,2,1,7,6,2,1,1,8,2,6,3,2,3,5,4,2,3,4,5,6,5,4,7,6]
			# training data which is already converted into number notation holds a random music phrase, This is to be replaced with 			the appropriate and valid training data set
	
			for sample, next_sample in zip(data, cycle(data[1:])):
   				ds.addSample(sample, next_sample) #Adding the samples to the dataset
	
			net = buildNetwork(1, 24, 1,hiddenclass=LSTMLayer, outputbias=False, recurrent=True) #Building a LSTM network
   		                                  
			#print("Beggining to train the network\n")
			#The steps below are used to train the network                   
			trainer = RPropMinusTrainer(net, dataset=ds)
			train_errors = [] # save errors for plotting later
			EPOCHS_PER_CYCLE = 5
			CYCLES = 100
			EPOCHS = EPOCHS_PER_CYCLE * CYCLES
			for i in xrange(CYCLES):
				trainer.trainEpochs(EPOCHS_PER_CYCLE)
				train_errors.append(trainer.testOnData())
				epoch = (i+1) * EPOCHS_PER_CYCLE
				stdout.flush()
			spin.stop()
			button.set_label("Finish")
			
		thread = threading.Thread(target=callback)        		
		thread.start()
        	#thread.join()
		#(int(random.random() * 199999)) ** (int(random.random() * 1999999))
        	#while(thread.is_alive()!= True):
        	#	i=0

		#print("Finished training network\n")
		
		
		
	
class gui:
	
	
	def __init__( self ):
	
		filename = "mainPage.glade"
		builder = Gtk.Builder()
		builder.add_from_file(filename)
		builder.connect_signals(self)
		window = builder.get_object("composer")
		window.show_all()
		
		handlers = {
			"onDeleteWindow": self.delete,
			"about": self.about,
			"execute":self.execute,
			"train":self.train
}
		builder.connect_signals(handlers)
		
		Gtk.main()
		
	def delete(self,*args):
		Gtk.main_quit
		exit(0)
		
	
	def about(self,*args):
		
		filename = "About.glade"
		builder = Gtk.Builder()
		builder.add_from_file(filename)
		builder.connect_signals(self)
		window = builder.get_object("about")
		window.show_all()
		

	
	def train(self,*args):
	
		dothis=trainer()

	def execute(self,*args):
	
		fh=open("Output.txt","w");
		temp=1
		valid=-1
		while temp <= 200 :
			predicted=net.activate(sample)
			print(predicted)
			predicted=round(predicted)
			if temp%4==0 and temp%8!=0 and temp!=valid:
				valid = temp
				fh.write("||  ")
			if temp%8==0 and temp!=valid:
				valid = temp
				fh.write("\n\n")	
			if predicted>=1 and predicted<=8:
				fh.write(f(predicted) + "  ")
				sample=predicted
				temp=temp+1
			
		print()

letsdothis = gui()
